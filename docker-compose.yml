# CompanyOS Docker Compose Configuration
# Complete development and production setup

version: '3.8'

services:
  # CompanyOS Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: companyos-app
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DATABASE_URL=postgresql://companyos_user:${DB_PASSWORD:-companyos123}@postgres:5432/companyos
      - SESSION_SECRET=${SESSION_SECRET:-your-super-secure-session-secret-change-this-in-production}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - companyos-network
    volumes:
      - app-logs:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.companyos.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.services.companyos.loadbalancer.server.port=5000"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: companyos-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=companyos
      - POSTGRES_USER=companyos_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-companyos123}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - companyos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U companyos_user -d companyos"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis (Optional - for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: companyos-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - companyos-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: companyos-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - companyos-network
    profiles:
      - with-nginx

# Named volumes for data persistence
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  nginx-logs:
    driver: local

# Custom network
networks:
  companyos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16